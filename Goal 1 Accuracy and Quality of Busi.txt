import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DynamicFileNameExample {

    public static void main(String[] args) throws IOException {
        // Create an HttpClient instance
        HttpClient httpClient = HttpClients.createDefault();

        // Define the URL of the resource
        String url = "https://example.com/large-resource";

        // Create an HTTP GET request
        HttpGet httpGet = new HttpGet(url);

        // Execute the request and get the response
        HttpResponse response = httpClient.execute(httpGet);

        // Check if the response is successful (status code 200)
        if (response.getStatusLine().getStatusCode() == 200) {
            // Get the response entity's input stream
            InputStream inputStream = response.getEntity().getContent();

            // Generate a dynamic file name based on the current timestamp
            String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
            String fileName = "response_content_" + timestamp + ".txt";

            // Write the response body to the dynamic file
            File outputFile = new File(fileName);
            writeInputStreamToFile(inputStream, outputFile);

            // Read from the same file
            String contentFromFile = readFromFile(outputFile);

            // Process the content as needed
            System.out.println("Content read from file: " + contentFromFile);
        } else {
            // Handle non-successful response (e.g., log an error)
            System.err.println("HTTP Request failed with status code: " + response.getStatusLine().getStatusCode());
        }
    }

    private static void writeInputStreamToFile(InputStream inputStream, File outputFile) throws IOException {
        try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
        } finally {
            // Ensure to close the input stream to release resources
            inputStream.close();
        }
    }

    private static String readFromFile(File file) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line).append("\n");
            }
            return stringBuilder.toString();
        }
    }
}
