/*
 * Copyright 2014 Fannie Mae. All rights reserved. Unpublished.
 * Rights reserved under the copyright laws of the United States and international
 * conventions. Use of a copyright notice is precautionary only and does not
 * imply publication or disclosure. This software contains confidential
 * information and trade secrets of Fannie Mae. Use, disclosure, or
 * reproduction is prohibited without the prior written consent of Fannie Mae.
 */
package com.fanniemae.lap.enums;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * LoanSaleType is an enumeration.
 */
public enum LoanSaleType {
	/**
	 * a enumerated value for CASH.
	 */
	CASH ("1", "Cash"),
		
	/**
	 * a enumerated value for LTSC.
	 */
	LTSC ("2", "LTSC"),
		
	/**
	 * a enumerated value for PFP.
	 */
	PFP ("3", "PFP"),
		
	/**
	 * a enumerated value for SWAP.
	 */
	SWAP ("4", "SWAP"),
		
	/**
	 * a enumerated value for WL_REMIC.
	 */
	WL_REMIC ("5", "WL REMIC"),
		
	/**
	 * a enumerated value for NULL_VALUE.
	 */
	NULL_VALUE (null, "Null");		
		
	/**
	 * the code of the LoanSaleType.
	 */
	private String code;
	
	/**
	 * the description of the LoanSaleType.
	 */
	private String description;
	
	/**
	 * the ENUMTYPE_LOOKUP map.
	 */
	private static final Map<String, LoanSaleType> ENUMTYPE_LOOKUP = 
			new HashMap<String, LoanSaleType>();

	/**
	 * do this once per class load.
	 */
	static {
		for (LoanSaleType s : EnumSet.allOf(LoanSaleType.class)) {
			ENUMTYPE_LOOKUP.put(s.getCode(), s);
		}
	}

	/** 
	 * constructor that creates an enumeration matching the passed name.
	 * 
	 * @param aCode construct an enumeration with the passed typeCode and 
	 * @param aDescription passed typeValue
	 */
	LoanSaleType(final String aCode, final String aDescription) {
		this.code = aCode;
		this.description = aDescription;
	}
	
	/**
	 * 
	 * @return the Code for the enumeration is returned.
	 */
	public String getCode() {
		return this.code;
	}
	
	/**
	 * 
	 * @return the Description for the enumeration is returned.
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * returns a LoanSaleType whose name matches the passed key.
	 * 
	 * @param aCode the typeCode of the enumeration to look up
	 * @return the LoanSaleType enumeration corresponding to the passed key
	 */
	public static LoanSaleType get(final String aCode) {	
		LoanSaleType value = ENUMTYPE_LOOKUP.get(aCode);
		if(value == null) {
			value = LoanSaleType.NULL_VALUE;
		}
		return value;
		
	}

	/**
	 * convert internal state to a printable string. 
	 * note: make sure to always return a code.
	 * 
	 * @return returns the internal state converted into a printable string
	 */
	@Override
	public String toString() {
		return this.getCode();
	}
}
